#!/bin/bash

# Check required environment variables
required_vars=(
    "CPASS_DIR"               # Directory containing LLVM pass .so files
    "EFACT_DIR"               # EFACT root directory
    "ARM_TOOLCHAIN_ROOT"      # ARM cross-compiler root
    "LLVM11_CLANG"            # LLVM 11 clang path
    "LLVM20_CLANG"            # LLVM 20 clang path
    "IDA_PATH"                # IDA Pro installation path
)

# Validate environment variables
missing_vars=()
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -gt 0 ]; then
    echo "Error: Missing required environment variables:"
    for var in "${missing_vars[@]}"; do
        echo "  $var"
    done
    echo "Please set these variables before running the script"
    exit 1
fi

# Derived paths
LiftedEXFsPath="${EFACT_DIR}/EFACT_NewBuild/Result/liftedGlibcComplement.bc"
IDA_EXEC="${IDA_PATH}/idat64"
VA_LIST_HELPER="${CPASS_DIR}/va_listHelperFunc_c.so"
LD_SCRIPT="${CPASS_DIR}/ld_script_aarch64_back.ld"

# Print configuration
echo "=== Runtime Configuration ==="
echo "CPASS_DIR: $CPASS_DIR"
echo "EFACT_DIR: $EFACT_DIR"
echo "ARM_TOOLCHAIN_ROOT: $ARM_TOOLCHAIN_ROOT"
echo "LLVM11_CLANG: $LLVM11_CLANG"
echo "LLVM20_CLANG: $LLVM20_CLANG"
echo "IDA_PATH: $IDA_PATH"
echo "==========================="

echo "Start running EFACT_MC"
echo "Start running EFACT"
python "${EFACT_DIR}/EFACT_NewBuild/pyelftools/EFACT.py" -complement "$1"

# Verify EFACT output
if [ -f "$LiftedEXFsPath" ]; then
    echo "Lifted EXFs generated successfully"
else
    echo "Error: Failed to generate lifted EXFs"
    exit 1
fi

echo "EFACT complete"

# Mcsema disassembly
echo "Start using mcsema-disass to disassemble the binary file"
"${IDA_EXEC}" \
    --disassembler "$IDA_EXEC" \
    --arch amd64 \
    --os linux \
    --entrypoint main \
    --binary "$1" \
    --output "${1}.cfg" \
    --log_file "${1}.log"

# Verify CFG file
if [ -f "${1}.cfg" ]; then
    echo "Disassembled CFG generated successfully"
else
    echo "Error: Failed to generate disassembled CFG"
    exit 1
fi

# Mcsema lifting
echo "Start using mcsema-lift to lift the binary file"
"${LLVM11_CLANG}" \
    --arch amd64 \
    --os linux \
    --cfg "${1}.cfg" \
    --output "${1}.bc" \
    --explicit_args_count 6 \
    --explicit_args \
    --abi_libraries "$LiftedEXFsPath" \
    --merge_segments \
    --name_lifted_sections

# Verify bitcode
if [ -f "${1}.bc" ]; then
    echo "LLVM bitcode lifted successfully"
else
    echo "Error: Failed to generate LLVM bitcode"
    exit 1
fi

echo "Mcsema progress complete"
echo "Starting LLVM optimization pipeline"

# Optimization pipeline
passes=(
    "FlagRegisterOPT -FlagOPT"
    "EXTInline -EXTInline"
    "printfPass -pfr"
    "va_listPass -vpfr"
    "fsRegisterPass -fsRegister"
    "checkLinkerType -CheckLinker"
    "FunctionNameDirectChange -funcNC"
    "ExternalEntryPointCheck -EEPFC"
    "statPass -stat"
    "fstatPass -fstat"
    "changCallingConvension -ChangeCC"
)

current_input="${1}.bc"
for pass in "${passes[@]}"; do
    IFS=' ' read -r -a pass_info <<< "$pass"
    pass_name=${pass_info[0]}
    pass_flag=${pass_info[1]}
    output_file="${1}-${pass_name}.bc"

    opt -load "${CPASS_DIR}/${pass_name}.so" \
         "$pass_flag" \
         "$current_input" \
         -o "$output_file"

    if [ -f "$output_file" ]; then
        echo "$pass_name completed successfully"
        current_input="$output_file"
    else
        echo "Error: $pass_name failed"
        exit 1
    fi
done

# TLS pass (LLVM 20)
echo "Starting TLStoRegister pass"
opt --load-pass-plugin="${CPASS_DIR}/TLS.so" \
    --passes="tls" \
    "$current_input" \
    -o "${1}-final.bc"

final_bitcode="${1}-final.bc"
if [ -f "$final_bitcode" ]; then
    echo "TLStoRegister pass completed successfully"
else
    echo "Error: TLStoRegister pass failed"
    exit 1
fi

# Final binary generation
echo "Starting final binary generation"
clang \
    -T "$LD_SCRIPT" \
    --sysroot="${ARM_TOOLCHAIN_ROOT}/aarch64-none-linux-gnu/libc" \
    --gcc-toolchain="${ARM_TOOLCHAIN_ROOT}" \
    -L. "$VA_LIST_HELPER" \
    "$final_bitcode" -O3 -lm -pthread \
    -o "${1}_AArch64"

# Verify final binary
if [ -f "${1}_AArch64" ]; then
    echo "Final binary generated successfully"
else
    echo "Error: Failed to generate final binary"
    exit 1
fi



echo "All processes completed successfully"
